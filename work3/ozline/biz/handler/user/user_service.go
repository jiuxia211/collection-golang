// Code generated by hertz generator.

package user

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	user "github.com/west2-online-reserve/collection-golang/work3/biz/model/user"
	"github.com/west2-online-reserve/collection-golang/work3/biz/pack"
	"github.com/west2-online-reserve/collection-golang/work3/biz/service"
	"github.com/west2-online-reserve/collection-golang/work3/pkg/constants"
	"github.com/west2-online-reserve/collection-golang/work3/pkg/constants/jwt"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.RegisterResponse)

	userResp, err := service.NewUserService(ctx, c).Register(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.User(userResp)
	pack.SendResponse(c, resp)
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(user.LoginResponse)

	userResp, err := service.NewUserService(ctx, c).Login(&req)

	if err != nil {
		pack.SendFailResponse(c, err)
	}

	token, err := jwt.CreateToken(userResp.Id)

	if err != nil {
		pack.SendFailResponse(c, err)
	}

	c.Header(constants.AuthHeader, token)

	resp.Base = pack.BuildBaseResp(nil)
	resp.Data = pack.User(userResp)
	pack.SendResponse(c, resp)
}
